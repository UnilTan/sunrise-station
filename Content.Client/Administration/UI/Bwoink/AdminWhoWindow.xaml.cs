using System.Text;
using Content.Client.Administration.Managers;
using Content.Client.Administration.Systems;
using Content.Client.UserInterface.Controls;
using Content.Shared.Administration;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Localization;

namespace Content.Client.Administration.UI.Bwoink
{
    [GenerateTypedNameReferences]
    public sealed partial class AdminWhoWindow : FancyWindow
    {
        [Dependency] private readonly IClientAdminManager _adminManager = default!;

        private AdminWhoSystem _adminWhoSystem = default!;

        public AdminWhoWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            _adminWhoSystem = EntitySystem.Get<AdminWhoSystem>();
            _adminWhoSystem.OnAdminWhoUpdate += OnAdminListReceived;

            RefreshButton.OnPressed += _ => RefreshAdminList();
            CloseButton.OnPressed += _ => Close();

            // Request the list when the window opens
            RefreshAdminList();
        }

        private void RefreshAdminList()
        {
            AdminsContainer.RemoveAllChildren();

            // Show loading message
            var loadingLabel = new Label
            {
                Text = Loc.GetString("admin-who-loading"),
                StyleClasses = { "LabelText" },
                HorizontalAlignment = Control.HAlignment.Center,
                Margin = new Thickness(8, 16, 8, 8)
            };
            AdminsContainer.AddChild(loadingLabel);

            // Request admin list from server
            _adminWhoSystem.RequestAdminWho();
        }

        private void OnAdminListReceived(List<AdminWhoEntry> admins)
        {
            AdminsContainer.RemoveAllChildren();

            if (admins.Count == 0)
            {
                var noAdminsLabel = new Label
                {
                    Text = Loc.GetString("admin-who-no-admins"),
                    StyleClasses = { "LabelText" },
                    HorizontalAlignment = Control.HAlignment.Center,
                    Margin = new Thickness(8, 16, 8, 8)
                };
                AdminsContainer.AddChild(noAdminsLabel);
                return;
            }

            // Add header
            var headerLabel = new Label
            {
                Text = Loc.GetString("admin-who-header"),
                StyleClasses = { "LabelHeading" },
                HorizontalAlignment = Control.HAlignment.Center,
                Margin = new Thickness(8, 8, 8, 4)
            };
            AdminsContainer.AddChild(headerLabel);

            // Add each admin
            foreach (var admin in admins)
            {
                var adminText = new StringBuilder();
                adminText.Append(admin.Name);
                
                if (!string.IsNullOrEmpty(admin.Title))
                    adminText.Append($": [{admin.Title}]");
                
                if (admin.IsStealth)
                    adminText.Append(" (S)");
                
                if (admin.IsAfk)
                    adminText.Append(" [AFK]");

                var adminLabel = new Label
                {
                    Text = adminText.ToString(),
                    StyleClasses = { "LabelText" },
                    HorizontalAlignment = Control.HAlignment.Left,
                    Margin = new Thickness(16, 2, 8, 2)
                };
                AdminsContainer.AddChild(adminLabel);
            }
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                _adminWhoSystem.OnAdminWhoUpdate -= OnAdminListReceived;
            }
            base.Dispose(disposing);
        }
    }
}