using Content.Shared.Administration;
using Content.Shared.Eui;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;

namespace Content.Client.Administration.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class AdminNotifyWindow : DefaultWindow
    {
        [Dependency] private readonly ILocalizationManager _localization = default!;

        public AdminNotifyWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            NotifyTitle.OnKeyBindUp += TitleOnTextChanged;
            Message.OnKeyBindUp += MessageOnTextChanged;
            Target.OnKeyBindUp += TargetOnTextChanged;
            
            // Set initial placeholder text
            Message.Placeholder = new Rope.Leaf(_localization.GetString("admin-notify-message-placeholder"));
            
            UpdateNotifyButton();
        }

        private void TitleOnTextChanged(GUIBoundKeyEventArgs args)
        {
            UpdateNotifyButton();
        }

        private void MessageOnTextChanged(GUIBoundKeyEventArgs args)
        {
            UpdateNotifyButton();
        }

        private void TargetOnTextChanged(GUIBoundKeyEventArgs args)
        {
            UpdateNotifyButton();
        }

        private void UpdateNotifyButton()
        {
            var hasTitle = !string.IsNullOrWhiteSpace(NotifyTitle.Text);
            var hasMessage = !string.IsNullOrWhiteSpace(Rope.Collapse(Message.TextRope).Trim());
            var hasTarget = !string.IsNullOrWhiteSpace(Target.Text);
            
            NotifyButton.Disabled = !hasTitle || !hasMessage || !hasTarget;
        }
    }
}