using Content.Client.Administration.UI.Dialogs;
using Content.Client.UserInterface.Controls;
using Robust.Client.AutoGenerated;
using Robust.Client.Console;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.IoC;
using System.Collections.Generic;

namespace Content.Client.Administration.UI.Tabs
{
    [GenerateTypedNameReferences]
    public sealed partial class GridSpawnTab : Control
    {
        [Dependency] private readonly IClientConsoleHost _console = default!;

        private readonly Dictionary<string, Control> _availableGridControls = new();

        // Predefined grids that administrators frequently use
        private readonly List<GridDefinition> _predefinedGrids = new()
        {
            new("emergency_shuttle", "Emergency Shuttle", "Maps/Shuttles/emergency.yml"),
            new("cargo_shuttle", "Cargo Shuttle", "Maps/Shuttles/cargo.yml"),
            new("syndicate_fighter", "Syndicate Fighter", "Maps/Shuttles/syndicate_fighter.yml"),
            new("trading_outpost", "Trading Outpost", "Maps/Outpost/trading_outpost.yml"),
            new("abandoned_ship", "Abandoned Ship", "Maps/Salvage/salvage_small_1.yml"),
            new("research_station", "Research Station", "Maps/Outpost/research_station.yml"),
        };

        private enum SpawnLocation
        {
            NearStation,
            Nullspace,
            Coordinates
        }

        public GridSpawnTab()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            RefreshButton.OnPressed += _ => RefreshGrids();

            // Setup location options
            LocationOption.AddItem(Loc.GetString("admin-grid-spawn-near-station"), (int)SpawnLocation.NearStation);
            LocationOption.AddItem(Loc.GetString("admin-grid-spawn-nullspace"), (int)SpawnLocation.Nullspace);
            LocationOption.AddItem(Loc.GetString("admin-grid-spawn-coordinates"), (int)SpawnLocation.Coordinates);
            LocationOption.SelectId(0); // Default to near station

            RefreshGrids();
        }

        private void RefreshGrids()
        {
            AvailableGridsContainer.RemoveAllChildren();
            _availableGridControls.Clear();

            if (_predefinedGrids.Count == 0)
            {
                var noGridsLabel = new Label { Text = Loc.GetString("admin-grid-spawn-no-available") };
                AvailableGridsContainer.AddChild(noGridsLabel);
                return;
            }

            foreach (var gridDef in _predefinedGrids)
            {
                var container = new BoxContainer { Orientation = BoxContainer.LayoutOrientation.Horizontal };
                
                var nameLabel = new Label 
                { 
                    Text = gridDef.DisplayName,
                    HorizontalExpand = true,
                    ClipText = true,
                    ToolTip = $"ID: {gridDef.Id}\nPath: {gridDef.Path}"
                };
                
                var spawnButton = new Button { Text = Loc.GetString("admin-grid-spawn-spawn-button") };
                spawnButton.OnPressed += _ => SpawnGrid(gridDef);
                
                container.AddChild(nameLabel);
                container.AddChild(spawnButton);
                
                AvailableGridsContainer.AddChild(container);
                _availableGridControls[gridDef.Id] = container;
            }
        }

        private void SpawnGrid(GridDefinition gridDef)
        {
            var selectedLocation = (SpawnLocation)LocationOption.SelectedId;
            
            // For now, use console commands to spawn grids
            // In a real implementation, you might want to create dedicated admin commands
            switch (selectedLocation)
            {
                case SpawnLocation.NearStation:
                    _console.ExecuteCommand($"loadgrid {gridDef.Path}");
                    break;
                case SpawnLocation.Nullspace:
                    _console.ExecuteCommand($"loadgrid {gridDef.Path} 0 0");
                    break;
                case SpawnLocation.Coordinates:
                    // Open coordinate input dialog
                    var dialog = new CoordinateInputDialog();
                    dialog.OnCoordinatesConfirmed += (x, y) => 
                    {
                        _console.ExecuteCommand($"loadgrid {gridDef.Path} {x} {y}");
                    };
                    dialog.OpenCentered();
                    break;
            }
        }

        private record GridDefinition(string Id, string DisplayName, string Path);
    }
}