using System.Numerics;
using Content.Client.Administration.Systems;
using Content.Client.UserInterface.Controls;
using Content.Shared.Administration;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Network;
using Robust.Shared.Timing;

namespace Content.Client.Administration.UI.Complaint
{
    [GenerateTypedNameReferences]
    public sealed partial class ComplaintCreateDialog : DefaultWindow
    {
        [Dependency] private readonly IEntityManager _entManager = default!;
        
        private readonly ComplaintSystem _complaintSystem;
        private readonly NetUserId _againstUserId;
        private readonly string _againstPlayerName;

        public ComplaintCreateDialog(NetUserId againstUserId, string againstPlayerName)
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            _complaintSystem = _entManager.System<ComplaintSystem>();
            _againstUserId = againstUserId;
            _againstPlayerName = againstPlayerName;

            SetSize = new Vector2(500, 350);
            Title = Loc.GetString("complaint-create-title");

            AgainstPlayerLabel.Text = Loc.GetString("complaint-create-against", ("player", _againstPlayerName));

            SubmitButton.OnPressed += OnSubmitPressed;
            CancelButton.OnPressed += OnCancelPressed;

            // Don't set placeholder text - not available in this UI framework

            _complaintSystem.OnComplaintCreatedResponse += OnComplaintCreatedResponse;
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                _complaintSystem.OnComplaintCreatedResponse -= OnComplaintCreatedResponse;
            }
            base.Dispose(disposing);
        }

        private void OnSubmitPressed(BaseButton.ButtonEventArgs args)
        {
            var reason = ReasonLineEdit.Text.Trim();
            var description = DescriptionTextEdit.TextRope?.ToString()?.Trim() ?? "";

            if (string.IsNullOrWhiteSpace(reason))
            {
                StatusLabel.Text = Loc.GetString("complaint-create-error-reason-required");
                StatusLabel.Modulate = Color.Red;
                return;
            }

            if (string.IsNullOrWhiteSpace(description))
            {
                StatusLabel.Text = Loc.GetString("complaint-create-error-description-required");
                StatusLabel.Modulate = Color.Red;
                return;
            }

            if (reason.Length > 100)
            {
                StatusLabel.Text = Loc.GetString("complaint-create-error-reason-too-long");
                StatusLabel.Modulate = Color.Red;
                return;
            }

            if (description.Length > 1000)
            {
                StatusLabel.Text = Loc.GetString("complaint-create-error-description-too-long");
                StatusLabel.Modulate = Color.Red;
                return;
            }

            StatusLabel.Text = Loc.GetString("complaint-create-submitting");
            StatusLabel.Modulate = Color.Yellow;
            SubmitButton.Disabled = true;

            _complaintSystem.CreateComplaint(_againstUserId, reason, description);
        }

        private void OnCancelPressed(BaseButton.ButtonEventArgs args)
        {
            Close();
        }

        private void OnComplaintCreatedResponse(object? sender, SharedComplaintSystem.ComplaintCreatedResponse response)
        {
            if (response.Success)
            {
                StatusLabel.Text = Loc.GetString("complaint-create-success", ("id", response.ComplaintId));
                StatusLabel.Modulate = Color.Green;
                
                // Close dialog after a short delay
                Timer.Spawn(TimeSpan.FromSeconds(2), Close);
            }
            else
            {
                StatusLabel.Text = response.ErrorMessage ?? Loc.GetString("complaint-create-error-unknown");
                StatusLabel.Modulate = Color.Red;
                SubmitButton.Disabled = false;
            }
        }
    }
}