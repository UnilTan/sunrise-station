using Content.Client.Administration.Systems;
using Content.Shared.Administration;
using Content.Shared.Administration.Managers;
using Robust.Client.AutoGenerated;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Network;
using System.Numerics;
using System.Linq;

namespace Content.Client.Administration.UI.Complaint
{
    [GenerateTypedNameReferences]
    public sealed partial class ComplaintListWindow : DefaultWindow
    {
        [Dependency] private readonly IEntityManager _entManager = default!;
        [Dependency] private readonly ISharedAdminManager _adminManager = default!;
        
        private readonly ComplaintSystem _complaintSystem;
        private bool _isAdmin;

        public ComplaintListWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            _complaintSystem = _entManager.System<ComplaintSystem>();
            
            SetSize = new Vector2(800, 600);
            Title = Loc.GetString("complaint-menu-title");

            RefreshButton.OnPressed += OnRefreshPressed;
            MyComplaintsButton.OnPressed += OnMyComplaintsPressed;
            AllComplaintsButton.OnPressed += OnAllComplaintsPressed;
            CloseButton.OnPressed += OnClosePressed;

            _complaintSystem.OnComplaintHistoryResponse += OnComplaintHistoryReceived;
            _complaintSystem.OnComplaintListUpdated += OnComplaintListUpdated;

            // Check if user is admin
            var localSession = IoCManager.Resolve<IPlayerManager>().LocalSession;
            if (localSession != null)
            {
                _isAdmin = _adminManager.IsAdmin(localSession);
                AllComplaintsButton.Visible = _isAdmin;
            }

            // Load initial data
            RefreshComplaints();
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                _complaintSystem.OnComplaintHistoryResponse -= OnComplaintHistoryReceived;
                _complaintSystem.OnComplaintListUpdated -= OnComplaintListUpdated;
            }
            base.Dispose(disposing);
        }

        private void OnRefreshPressed(BaseButton.ButtonEventArgs args)
        {
            RefreshComplaints();
        }

        private void OnMyComplaintsPressed(BaseButton.ButtonEventArgs args)
        {
            StatusLabel.Text = "Loading your complaints...";
            ComplaintContainer.RemoveAllChildren();
            _complaintSystem.RequestComplaintHistory();
        }

        private void OnAllComplaintsPressed(BaseButton.ButtonEventArgs args)
        {
            if (!_isAdmin) return;
            
            StatusLabel.Text = "Loading all complaints...";
            ComplaintContainer.RemoveAllChildren();
            _complaintSystem.RequestComplaintHistory();
        }

        private void OnClosePressed(BaseButton.ButtonEventArgs args)
        {
            Close();
        }

        private void RefreshComplaints()
        {
            StatusLabel.Text = "Loading complaints...";
            ComplaintContainer.RemoveAllChildren();
            _complaintSystem.RequestComplaintHistory();
        }

        private void OnComplaintHistoryReceived(object? sender, SharedComplaintSystem.ComplaintHistoryResponse response)
        {
            StatusLabel.Text = response.Complaints.Count > 0 ? "" : "No complaints found.";
            
            ComplaintContainer.RemoveAllChildren();

            foreach (var complaint in response.Complaints.OrderByDescending(c => c.CreatedAt))
            {
                var complaintControl = CreateComplaintControl(complaint);
                ComplaintContainer.AddChild(complaintControl);
            }
        }

        private void OnComplaintListUpdated(object? sender, SharedComplaintSystem.ComplaintListUpdated update)
        {
            // Refresh the list when complaints are updated
            RefreshComplaints();
        }

        private Control CreateComplaintControl(SharedComplaintSystem.ComplaintInfo complaint)
        {
            var container = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Vertical,
                Margin = new Thickness(5),
                SeparationOverride = 5
            };

            // Add border
            var panelContainer = new PanelContainer
            {
                StyleClasses = { "ButtonSquare" },
                Children = { container }
            };

            // Header with basic info
            var headerContainer = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Horizontal,
                SeparationOverride = 10
            };

            headerContainer.AddChild(new Label
            {
                Text = $"#{complaint.Id}",
                StyleClasses = { "LabelBig" }
            });

            headerContainer.AddChild(new Label
            {
                Text = $"{complaint.ComplainantName} vs {complaint.AgainstName}",
                HorizontalExpand = true
            });

            headerContainer.AddChild(new Label
            {
                Text = complaint.Status.ToString(),
                Modulate = GetStatusColor(complaint.Status)
            });

            headerContainer.AddChild(new Label
            {
                Text = complaint.CreatedAt.ToString("yyyy-MM-dd HH:mm")
            });

            container.AddChild(headerContainer);

            // Reason
            container.AddChild(new Label
            {
                Text = $"Reason: {complaint.Reason}",
                StyleClasses = { "LabelSubText" }
            });

            // Description (truncated if too long)
            var description = complaint.Description.Length > 100 
                ? complaint.Description.Substring(0, 100) + "..." 
                : complaint.Description;
            
            container.AddChild(new Label
            {
                Text = $"Description: {description}",
                StyleClasses = { "LabelSubText" }
            });

            // Message count
            container.AddChild(new Label
            {
                Text = $"Messages: {complaint.Messages.Count}",
                StyleClasses = { "LabelSubText" }
            });

            // View button
            var viewButton = new Button
            {
                Text = "View Details",
                HorizontalAlignment = Control.HAlignment.Right
            };
            viewButton.OnPressed += _ => OpenComplaintDetails(complaint);
            container.AddChild(viewButton);

            return panelContainer;
        }

        private Color GetStatusColor(SharedComplaintSystem.ComplaintStatus status)
        {
            return status switch
            {
                SharedComplaintSystem.ComplaintStatus.Open => Color.Orange,
                SharedComplaintSystem.ComplaintStatus.InProgress => Color.Yellow,
                SharedComplaintSystem.ComplaintStatus.Resolved => Color.Green,
                SharedComplaintSystem.ComplaintStatus.Rejected => Color.Red,
                SharedComplaintSystem.ComplaintStatus.Closed => Color.Gray,
                _ => Color.White
            };
        }

        private void OpenComplaintDetails(SharedComplaintSystem.ComplaintInfo complaint)
        {
            var detailWindow = new ComplaintDetailWindow(complaint);
            detailWindow.OpenCentered();
        }
    }
}