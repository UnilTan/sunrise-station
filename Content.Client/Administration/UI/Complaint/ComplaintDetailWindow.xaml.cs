using Content.Client.Administration.Systems;
using Content.Shared.Administration;
using Content.Shared.Administration.Managers;
using Robust.Client.AutoGenerated;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Network;
using Robust.Shared.Utility;
using System.Numerics;
using System.Linq;

namespace Content.Client.Administration.UI.Complaint
{
    [GenerateTypedNameReferences]
    public sealed partial class ComplaintDetailWindow : DefaultWindow
    {
        [Dependency] private readonly IEntityManager _entManager = default!;
        [Dependency] private readonly ISharedAdminManager _adminManager = default!;
        [Dependency] private readonly IPlayerManager _playerManager = default!;
        
        private readonly ComplaintSystem _complaintSystem;
        private readonly SharedComplaintSystem.ComplaintInfo _complaint;
        private bool _isAdmin;

        public ComplaintDetailWindow(SharedComplaintSystem.ComplaintInfo complaint)
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            _complaint = complaint;
            _complaintSystem = _entManager.System<ComplaintSystem>();
            
            SetSize = new Vector2(700, 500);
            Title = $"Complaint #{complaint.Id}";

            WindowCloseButton.OnPressed += OnClosePressed;
            SendButton.OnPressed += OnSendPressed;
            UpdateStatusButton.OnPressed += OnUpdateStatusPressed;

            _complaintSystem.OnComplaintTextMessageReceived += OnMessageReceived;

            // Check if user is admin
            var localSession = _playerManager.LocalSession;
            if (localSession != null)
            {
                _isAdmin = _adminManager.IsAdmin(localSession);
                AdminControls.Visible = _isAdmin;
            }

            SetupUI();
            LoadMessages();
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                _complaintSystem.OnComplaintTextMessageReceived -= OnMessageReceived;
            }
            base.Dispose(disposing);
        }

        private void SetupUI()
        {
            ComplaintIdLabel.Text = $"#{_complaint.Id}";
            StatusLabel.Text = _complaint.Status.ToString();
            StatusLabel.Modulate = GetStatusColor(_complaint.Status);
            
            ParticipantsLabel.Text = $"{_complaint.ComplainantName} vs {_complaint.AgainstName}";
            ReasonLabel.Text = $"Reason: {_complaint.Reason}";
            DescriptionLabel.Text = $"Description: {_complaint.Description}";
            CreatedLabel.Text = $"Created: {_complaint.CreatedAt:yyyy-MM-dd HH:mm}";

            if (_isAdmin)
            {
                SetupAdminControls();
            }
        }

        private void SetupAdminControls()
        {
            StatusOption.AddItem("Open", (int)SharedComplaintSystem.ComplaintStatus.Open);
            StatusOption.AddItem("In Progress", (int)SharedComplaintSystem.ComplaintStatus.InProgress);
            StatusOption.AddItem("Resolved", (int)SharedComplaintSystem.ComplaintStatus.Resolved);
            StatusOption.AddItem("Rejected", (int)SharedComplaintSystem.ComplaintStatus.Rejected);
            StatusOption.AddItem("Closed", (int)SharedComplaintSystem.ComplaintStatus.Closed);

            StatusOption.SelectId((int)_complaint.Status);
        }

        private void LoadMessages()
        {
            MessageContainer.RemoveAllChildren();
            
            foreach (var message in _complaint.Messages.OrderBy(m => m.SentAt))
            {
                var messageControl = CreateMessageControl(message);
                MessageContainer.AddChild(messageControl);
            }
        }

        private Control CreateMessageControl(SharedComplaintSystem.ComplaintTextMessage message)
        {
            var container = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Vertical,
                Margin = new Thickness(5),
                SeparationOverride = 2
            };

            // Add border
            var panelContainer = new PanelContainer
            {
                StyleClasses = { message.IsAdminMessage ? "ButtonColorRed" : "ButtonSquare" },
                Children = { container }
            };

            // Header with sender and timestamp
            var headerContainer = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Horizontal,
                SeparationOverride = 10
            };

            var senderName = message.SenderUserId == SharedComplaintSystem.SystemUserId 
                ? "System" 
                : GetPlayerName(message.SenderUserId);
                
            headerContainer.AddChild(new Label
            {
                Text = senderName + (message.IsAdminMessage ? " (Admin)" : ""),
                StyleClasses = { "LabelSubText" }
            });

            headerContainer.AddChild(new Control { HorizontalExpand = true });

            headerContainer.AddChild(new Label
            {
                Text = message.SentAt.ToString("HH:mm:ss"),
                StyleClasses = { "LabelSubText" }
            });

            container.AddChild(headerContainer);

            // Message text
            container.AddChild(new RichTextLabel
            {
                Text = message.Text,
                HorizontalExpand = true
            });

            return panelContainer;
        }

        private string GetPlayerName(NetUserId userId)
        {
            if (userId == _complaint.ComplainantUserId)
                return _complaint.ComplainantName;
            if (userId == _complaint.AgainstUserId)
                return _complaint.AgainstName;
            if (userId == _complaint.AssignedAdminId)
                return _complaint.AssignedAdminName ?? "Admin";
            
            return "Unknown";
        }

        private Color GetStatusColor(SharedComplaintSystem.ComplaintStatus status)
        {
            return status switch
            {
                SharedComplaintSystem.ComplaintStatus.Open => Color.Orange,
                SharedComplaintSystem.ComplaintStatus.InProgress => Color.Yellow,
                SharedComplaintSystem.ComplaintStatus.Resolved => Color.Green,
                SharedComplaintSystem.ComplaintStatus.Rejected => Color.Red,
                SharedComplaintSystem.ComplaintStatus.Closed => Color.Gray,
                _ => Color.White
            };
        }

        private void OnClosePressed(BaseButton.ButtonEventArgs args)
        {
            Close();
        }

        private void OnSendPressed(BaseButton.ButtonEventArgs args)
        {
            var messageText = MessageInput.TextRope?.ToString()?.Trim();
            if (string.IsNullOrWhiteSpace(messageText))
                return;

            _complaintSystem.SendComplaintMessage(_complaint.Id, messageText, _isAdmin);
            MessageInput.TextRope = Rope.Leaf.Empty;
        }

        private void OnUpdateStatusPressed(BaseButton.ButtonEventArgs args)
        {
            if (!_isAdmin) return;

            var selectedStatus = (SharedComplaintSystem.ComplaintStatus)StatusOption.SelectedId;
            _complaintSystem.UpdateComplaintStatus(_complaint.Id, selectedStatus);
            
            StatusLabel.Text = selectedStatus.ToString();
            StatusLabel.Modulate = GetStatusColor(selectedStatus);
        }

        private void OnMessageReceived(object? sender, SharedComplaintSystem.ComplaintTextMessage message)
        {
            if (message.ComplaintId == _complaint.Id)
            {
                // Add new message to the list
                _complaint.Messages.Add(message);
                LoadMessages();
                
                // Scroll to bottom
                var scrollContainer = MessageContainer.Parent as ScrollContainer;
                scrollContainer?.SetScrollValue(Vector2.UnitY);
            }
        }
    }
}