using System;
using System.Collections.Generic;
using System.Linq;
using Content.Client.Administration.Systems;
using Content.Shared.Administration;
using Content.Shared.Database;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Network;
using Robust.Shared.Timing;

namespace Content.Client.UserInterface.Systems.MentorHelp
{
    /// <summary>
    /// Main control for mentor help interface
    /// </summary>
    [GenerateTypedNameReferences]
    public sealed partial class MentorHelpControl : Control
    {
        [Dependency] private readonly IUserInterfaceManager _ui = default!;
        [Dependency] private readonly IGameTiming _timing = default!;

        private MentorHelpSystem? _mentorHelpSystem;
        private NetUserId _ownerUserId;
        private bool _hasMentorPermissions;
        private List<MentorHelpTicketData> _tickets = new();
        private MentorHelpTicketData? _selectedTicket;
        private Dictionary<int, List<MentorHelpMessageData>> _ticketMessages = new();

        public MentorHelpControl()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            // Wire up button events
            NewTicketButton.OnPressed += _ => OpenNewTicketDialog();
            RefreshButton.OnPressed += _ => RefreshTickets();
            SendReplyButton.OnPressed += _ => SendReply();
            ClaimButton.OnPressed += _ => ClaimTicket();
            CloseTicketButton.OnPressed += _ => CloseTicket();

            // Wire up ticket selection
            TicketsList.OnItemSelected += OnTicketSelected;

            // Handle enter key in reply input
            ReplyInput.OnTextEntered += _ => SendReply();

            // Hide ticket details initially
            UpdateTicketDetailsVisibility();
        }

        public void Initialize(MentorHelpSystem? mentorHelpSystem, NetUserId ownerUserId, bool hasMentorPermissions)
        {
            _mentorHelpSystem = mentorHelpSystem;
            _ownerUserId = ownerUserId;
            _hasMentorPermissions = hasMentorPermissions;

            // Update UI based on permissions
            NewTicketButton.Visible = true; // Everyone can create tickets
            ClaimButton.Visible = _hasMentorPermissions;
            CloseTicketButton.Visible = _hasMentorPermissions;
        }

        public void UpdateTicketsList(List<MentorHelpTicketData> tickets)
        {
            _tickets = tickets;
            TicketsList.Clear();

            foreach (var ticket in tickets.OrderByDescending(t => t.UpdatedAt))
            {
                var statusIcon = ticket.Status switch
                {
                    MentorHelpTicketStatus.Open => "[color=green]●[/color]",
                    MentorHelpTicketStatus.Assigned => "[color=yellow]●[/color]",
                    MentorHelpTicketStatus.AwaitingResponse => "[color=orange]●[/color]",
                    MentorHelpTicketStatus.Closed => "[color=gray]●[/color]",
                    _ => "[color=red]●[/color]"
                };

                var hasUnread = ticket.HasUnreadMessages ? "[color=red]*[/color]" : "";
                var listItem = $"{statusIcon} #{ticket.Id} {hasUnread} {ticket.Subject}";

                TicketsList.AddItem(listItem);
            }

            // Try to keep current selection if possible - simplified for now
            // if (_selectedTicket != null)
            // {
            //     var selectedIndex = _tickets.FindIndex(t => t.Id == _selectedTicket.Id);
            //     if (selectedIndex >= 0 && selectedIndex < TicketsList.Count)
            //     {
            //         TicketsList.Select(selectedIndex);
            //     }
            // }
        }

        public void UpdateTicketMessages(int ticketId, List<MentorHelpMessageData> messages)
        {
            _ticketMessages[ticketId] = messages;

            if (_selectedTicket?.Id == ticketId)
            {
                DisplayTicketMessages(messages);
            }
        }

        public void UpdateTicket(MentorHelpTicketData ticket)
        {
            // Update ticket in our list
            var index = _tickets.FindIndex(t => t.Id == ticket.Id);
            if (index >= 0)
            {
                _tickets[index] = ticket;
            }
            else
            {
                _tickets.Add(ticket);
            }

            // Update selected ticket if it's the one that changed
            if (_selectedTicket?.Id == ticket.Id)
            {
                _selectedTicket = ticket;
                UpdateTicketHeader();
            }

            // Refresh the list to show updated status
            UpdateTicketsList(_tickets);
        }

        private void OnTicketSelected(ItemList.ItemListSelectedEventArgs args)
        {
            if (args.ItemIndex < 0 || args.ItemIndex >= _tickets.Count)
                return;

            _selectedTicket = _tickets[args.ItemIndex];
            UpdateTicketDetailsVisibility();
            UpdateTicketHeader();

            // Request messages for this ticket
            _mentorHelpSystem?.RequestTicketMessages(_selectedTicket.Id);
        }

        private void UpdateTicketDetailsVisibility()
        {
            var hasTicket = _selectedTicket != null;
            TicketHeader.Visible = hasTicket;
            MessagesScroll.Visible = hasTicket;
            ReplyInput.Visible = hasTicket;
            SendReplyButton.Visible = hasTicket;
            ClaimButton.Visible = hasTicket && _hasMentorPermissions;
            CloseTicketButton.Visible = hasTicket && _hasMentorPermissions;
        }

        private void UpdateTicketHeader()
        {
            if (_selectedTicket == null)
                return;

            TicketSubject.Text = $"#{_selectedTicket.Id}: {_selectedTicket.Subject}";

            var statusText = _selectedTicket.Status.ToString();
            var assignedText = _selectedTicket.AssignedToName ?? "Не назначен";
            var createdText = _selectedTicket.CreatedAt.ToString("dd.MM.yyyy HH:mm");

            TicketInfo.Text = $"Статус: {statusText} | Назначен: {assignedText} | Создан: {createdText}";

            // Update button states
            if (_hasMentorPermissions)
            {
                ClaimButton.Text = _selectedTicket.AssignedToUserId == _ownerUserId ? "Освободить" : "Взять";
                CloseTicketButton.Disabled = _selectedTicket.Status == MentorHelpTicketStatus.Closed;
            }
        }

        private void DisplayTicketMessages(List<MentorHelpMessageData> messages)
        {
            MessagesContainer.RemoveAllChildren();

            foreach (var message in messages.OrderBy(m => m.SentAt))
            {
                var messageBox = new PanelContainer
                {
                    StyleClasses = { "PanelColorMedium" },
                    SetHeight = 60
                };

                var vbox = new BoxContainer
                {
                    Orientation = BoxContainer.LayoutOrientation.Vertical,
                    Margin = new Thickness(5)
                };

                // Message header with sender and time
                var header = new Label
                {
                    Text = $"{message.SenderName} - {message.SentAt:dd.MM.yyyy HH:mm}",
                    StyleClasses = { "LabelSubText" }
                };

                // Message content
                var content = new RichTextLabel
                {
                    Text = message.Message,
                    VerticalExpand = true
                };

                vbox.AddChild(header);
                vbox.AddChild(content);
                messageBox.AddChild(vbox);
                MessagesContainer.AddChild(messageBox);
            }

            // Scroll to bottom - simplified approach
            // MessagesScroll.GetVScrollBar().ValueTarget = MessagesScroll.GetVScrollBar().MaxValue;
        }

        private void OpenNewTicketDialog()
        {
            var dialog = new MentorHelpNewTicketDialog();
            dialog.OnTicketCreated += (subject, message) =>
            {
                _mentorHelpSystem?.CreateTicket(subject, message);
                dialog.Close();
            };
            dialog.OpenCentered();
        }

        private void RefreshTickets()
        {
            _mentorHelpSystem?.RequestTickets(!_hasMentorPermissions);
        }

        private void SendReply()
        {
            if (_selectedTicket == null || string.IsNullOrWhiteSpace(ReplyInput.Text))
                return;

            _mentorHelpSystem?.ReplyToTicket(_selectedTicket.Id, ReplyInput.Text.Trim());
            ReplyInput.Text = string.Empty;
        }

        private void ClaimTicket()
        {
            if (_selectedTicket == null)
                return;

            _mentorHelpSystem?.ClaimTicket(_selectedTicket.Id);
        }

        private void CloseTicket()
        {
            if (_selectedTicket == null)
                return;

            _mentorHelpSystem?.CloseTicket(_selectedTicket.Id);
        }
    }
}