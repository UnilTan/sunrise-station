using System.Numerics;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Random;

namespace Content.Client.Paper.UI;

[GenerateTypedNameReferences]
public sealed partial class SignatureCollection : Container
{
    private List<SignatureWidget> _signatures = new();

    /// Seed for random number generator to place signatures deterministically
    public int PlacementSeed;

    public SignatureCollection()
    {
        RobustXamlLoader.Load(this);
    }

    /// <summary>
    /// Remove any signatures from the page
    /// </summary>
    public void RemoveSignatures()
    {
        _signatures.Clear();
        InvalidateArrange();
    }

    /// <summary>
    /// Adds a signature to the display; will perform
    /// automatic layout.
    /// </summary>
    public void AddSignature(SignatureWidget s)
    {
        _signatures.Add(s);
        AddChild(s);
    }

    protected override Vector2 ArrangeOverride(Vector2 finalSize)
    {
        var random = new Random(PlacementSeed);
        
        // Place signatures at the bottom of the paper, arranged horizontally
        var signatureHeight = 25f; // Fixed height for signatures
        var currentX = 10f; // Start with some margin
        var yPosition = finalSize.Y - signatureHeight - 10f; // Near bottom with margin

        for (var i = 0; i < _signatures.Count; i++)
        {
            var signature = _signatures[i];
            var signatureWidth = signature.DesiredPixelSize.X;
            
            // If we don't have enough space, wrap to next line
            if (currentX + signatureWidth > finalSize.X * UIScale - 10f)
            {
                currentX = 10f;
                yPosition -= signatureHeight + 5f; // Move up by signature height plus small margin
            }

            var finalPosition = new Vector2i((int)currentX, (int)(yPosition * UIScale));
            var finalBox = new UIBox2i(finalPosition, finalPosition + signature.DesiredPixelSize);
            signature.ArrangePixel(finalBox);

            currentX += signatureWidth + 15f; // Add some spacing between signatures
        }

        return finalSize;
    }
}