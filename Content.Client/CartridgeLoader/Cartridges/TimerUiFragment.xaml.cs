using Content.Shared.CartridgeLoader.Cartridges;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;
using System.Linq;

namespace Content.Client.CartridgeLoader.Cartridges;

[GenerateTypedNameReferences]
public sealed partial class TimerUiFragment : BoxContainer
{
    [Dependency] private readonly IGameTiming _timing = default!;

    public event Action<TimerUiAction, string, int>? OnTimerAction;

    private readonly Dictionary<string, TimerItemControl> _timerControls = new();

    public TimerUiFragment()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        
        Orientation = LayoutOrientation.Vertical;
        HorizontalExpand = true;
        VerticalExpand = true;

        CreateButton.OnPressed += OnCreatePressed;
        
        // Set default values
        MinutesInput.Text = "0";
        SecondsInput.Text = "30";
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);
        
        // Update timer displays
        foreach (var (_, control) in _timerControls)
        {
            control.UpdateDisplay(_timing.CurTime);
        }
    }

    private void OnCreatePressed(BaseButton.ButtonEventArgs _)
    {
        var name = TimerNameInput.Text.Trim();
        if (string.IsNullOrWhiteSpace(name))
            return;

        if (!int.TryParse(MinutesInput.Text, out var minutes) || minutes < 0)
            minutes = 0;
        if (!int.TryParse(SecondsInput.Text, out var seconds) || seconds < 0)
            seconds = 0;

        var totalSeconds = minutes * 60 + seconds;
        if (totalSeconds <= 0)
            return;

        OnTimerAction?.Invoke(TimerUiAction.Create, name, totalSeconds);
        
        // Clear inputs
        TimerNameInput.Text = "";
        MinutesInput.Text = "0";
        SecondsInput.Text = "30";
    }

    public void UpdateState(List<TimerEntry> timers)
    {
        // Remove controls for timers that no longer exist
        var timersToRemove = _timerControls.Keys.Except(timers.Select(t => t.Name)).ToList();
        foreach (var timerName in timersToRemove)
        {
            if (_timerControls.TryGetValue(timerName, out var control))
            {
                TimersContainer.RemoveChild(control);
                _timerControls.Remove(timerName);
            }
        }

        // Add or update timer controls
        foreach (var timer in timers)
        {
            if (_timerControls.TryGetValue(timer.Name, out var existingControl))
            {
                existingControl.UpdateTimer(timer);
            }
            else
            {
                var newControl = new TimerItemControl(timer, OnTimerAction);
                _timerControls[timer.Name] = newControl;
                TimersContainer.AddChild(newControl);
            }
        }
    }
}

public sealed class TimerItemControl : BoxContainer
{
    private readonly Label _nameLabel;
    private readonly Label _timeLabel;
    private readonly Button _startStopButton;
    private readonly Button _resetButton;
    private readonly Button _removeButton;
    
    private TimerEntry _timer;
    private readonly Action<TimerUiAction, string, int>? _onAction;

    public TimerItemControl(TimerEntry timer, Action<TimerUiAction, string, int>? onAction)
    {
        _timer = timer;
        _onAction = onAction;
        
        Orientation = LayoutOrientation.Horizontal;
        HorizontalExpand = true;
        Margin = new Thickness(2);

        _nameLabel = new Label
        {
            Text = timer.Name,
            VerticalAlignment = VAlignment.Center,
            SetWidth = 150
        };

        _timeLabel = new Label
        {
            VerticalAlignment = VAlignment.Center,
            SetWidth = 80
        };

        _startStopButton = new Button
        {
            Text = timer.IsRunning ? "Stop" : "Start",
            SetWidth = 60
        };
        _startStopButton.OnPressed += OnStartStopPressed;

        _resetButton = new Button
        {
            Text = "Reset",
            SetWidth = 60
        };
        _resetButton.OnPressed += OnResetPressed;

        _removeButton = new Button
        {
            Text = "X",
            SetWidth = 30
        };
        _removeButton.OnPressed += OnRemovePressed;

        AddChild(_nameLabel);
        AddChild(_timeLabel);
        AddChild(_startStopButton);
        AddChild(_resetButton);
        AddChild(_removeButton);

        UpdateDisplay(IoCManager.Resolve<IGameTiming>().CurTime);
    }

    public void UpdateTimer(TimerEntry timer)
    {
        _timer = timer;
        _startStopButton.Text = timer.IsRunning ? "Stop" : "Start";
    }

    public void UpdateDisplay(TimeSpan currentTime)
    {
        var remaining = _timer.GetRemainingSeconds(currentTime);
        var minutes = remaining / 60;
        var seconds = remaining % 60;
        _timeLabel.Text = $"{minutes:D2}:{seconds:D2}";
        
        if (_timer.IsExpired(currentTime))
        {
            _timeLabel.StyleClasses.Add("LabelDanger");
        }
        else
        {
            _timeLabel.StyleClasses.Remove("LabelDanger");
        }
    }

    private void OnStartStopPressed(BaseButton.ButtonEventArgs _)
    {
        var action = _timer.IsRunning ? TimerUiAction.Stop : TimerUiAction.Start;
        _onAction?.Invoke(action, _timer.Name, 0);
    }

    private void OnResetPressed(BaseButton.ButtonEventArgs _)
    {
        _onAction?.Invoke(TimerUiAction.Reset, _timer.Name, 0);
    }

    private void OnRemovePressed(BaseButton.ButtonEventArgs _)
    {
        _onAction?.Invoke(TimerUiAction.Remove, _timer.Name, 0);
    }
}