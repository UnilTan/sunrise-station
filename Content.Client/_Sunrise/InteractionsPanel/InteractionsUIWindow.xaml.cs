using System.Linq;
using System.Numerics;
using Content.Client._Sunrise.InteractionsPanel.Models;
using Content.Shared._Sunrise.InteractionsPanel.Data.Components;
using Content.Shared._Sunrise.InteractionsPanel.Data.Prototypes;
using Content.Shared._Sunrise.InteractionsPanel.Data.UI;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Prototypes;
using Robust.Shared.Random;
using Robust.Shared.Timing;

namespace Content.Client._Sunrise.InteractionsPanel;

[GenerateTypedNameReferences]
public sealed partial class InteractionsUIWindow : DefaultWindow
{
    #region Dependencies

    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IGameTiming _gameTiming = default!;
    [Dependency] private readonly IConfigurationManager _cfg = default!;
    [Dependency] private readonly CustomInteractionService _customInteractionService = default!;
    [Dependency] private readonly IRobustRandom _random = default!;

    private readonly SpriteSystem _spriteSystem;

    #endregion

    #region Properties

    private InteractionsWindowBoundUserInterface? _owner;
    private List<string>? _currentInteractionIds;
    private string _searchText = string.Empty;
    private string _customSearchText = string.Empty;
    private Dictionary<Button, string> _buttonInteractions = new();
    private HashSet<string> _customInteractionIds = new();

    #endregion

    #region Initialization

    public InteractionsUIWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _spriteSystem = _entityManager.System<SpriteSystem>();

        MainTabContainer.SetTabTitle(0, "Взаимодействия");
        MainTabContainer.SetTabTitle(1, "Кастомные");
        MainTabContainer.SetTabTitle(2, "Настройки");

        SearchInput.OnTextChanged += OnSearchTextChanged;

        CustomInteractionSearchInput.OnTextChanged += OnCustomInteractionSearchTextChanged;
        NewCustomInteractionButton.OnPressed += OnNewCustomInteractionPressed;

        LoadSavedInteractions();
        InitializeSettings();
    }

    private void InitializeSettings()
    {
        var currentVisibility = _cfg.GetCVar(InteractionsCVars.EmoteVisibility);
        EmoteVisibilityCheckBox.Pressed = currentVisibility;
        ApplySettingsButton.OnPressed += OnApplySettings;
    }

    private void OnApplySettings(BaseButton.ButtonEventArgs args)
    {
        var emoteVisible = EmoteVisibilityCheckBox.Pressed;
        SetEmoteVisibility(emoteVisible);
    }

    private void OnSearchTextChanged(LineEdit.LineEditEventArgs args)
    {
        _searchText = args.Text.ToLowerInvariant();
        if (_currentInteractionIds != null)
        {
            _buttonInteractions.Clear();
            _customInteractionIds.Clear();
            PopulateCategories(_currentInteractionIds);
        }
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        UpdateButtonsState();
    }

    private bool IsInteractionOnCooldown(string interactionId)
    {
        var userEntity = _owner?.Owner ?? default;

        if (!_entityManager.TryGetComponent<InteractionsComponent>(userEntity, out var component))
            return false;

        if (!component.InteractionCooldowns.TryGetValue(interactionId, out var endTime))
            return false;

        return _gameTiming.CurTime < endTime;
    }

    private void UpdateButtonsState()
    {
        var userEntity = _owner?.Owner ?? default;

        if (!_entityManager.TryGetComponent<InteractionsComponent>(userEntity, out var component))
            return;

        foreach (var (button, interactionId) in _buttonInteractions)
        {
            var isCustom = _customInteractionIds.Contains(interactionId);

            var interactionName = "Unknown";

            if (!isCustom)
            {
                if (_prototypeManager.TryIndex<InteractionPrototype>(interactionId, out var prototype))
                {
                    interactionName = prototype.Name;
                }
                else
                {
                    continue;
                }
            }
            else
            {
                var customInteraction = _customInteractionService.GetInteraction(interactionId);
                if (customInteraction != null)
                {
                    interactionName = customInteraction.Name;
                }
            }

            var isOnCooldown = IsInteractionOnCooldown(interactionId);
            button.Disabled = isOnCooldown;

            if (isOnCooldown && component.InteractionCooldowns.TryGetValue(interactionId, out var endTime))
            {
                var remainingTime = endTime - _gameTiming.CurTime;
                if (remainingTime > TimeSpan.Zero)
                {
                    var seconds = (int)Math.Ceiling(remainingTime.TotalSeconds);
                    button.Text = $"{interactionName} ({seconds}с)";
                }
            }
            else
            {
                button.Text = interactionName;
            }
        }
    }

    #endregion

    #region State Management

    public void UpdateState(NetEntity userEntity,
        NetEntity targetEntity,
        List<string> availableInteractionIds)
    {
        UpdateEntityInformation(userEntity, targetEntity);
        _currentInteractionIds = availableInteractionIds;
        _buttonInteractions.Clear();
        _customInteractionIds.Clear();
        PopulateCategories(availableInteractionIds);
    }

    private void UpdateEntityInformation(
        NetEntity userEntity,
        NetEntity targetEntity)
    {
        var selfTargeting = userEntity == targetEntity;
        var nameUser = _entityManager.GetComponentOrNull<MetaDataComponent>(_entityManager.GetEntity(userEntity));

        UserSpriteView.SetEntity(_entityManager.GetEntity(userEntity));
        NameUser.Text = $"{nameUser?.EntityName}";
        TargetContainer.Visible = !selfTargeting;

        if (!selfTargeting)
        {
            TargetSpriteView.SetEntity(_entityManager.GetEntity(targetEntity));
            var nameTarget = _entityManager.GetComponentOrNull<MetaDataComponent>(_entityManager.GetEntity(targetEntity));
            NameTarget.Text = $"{nameTarget?.EntityName}";
        }
    }

    #endregion

    #region UI Population

    private void PopulateCategories(List<string> interactionIds)
    {
        CategoriesContainer.DisposeAllChildren();

        var customInteractions = _customInteractionService.GetInteractions();

        if (!string.IsNullOrEmpty(_searchText))
        {
            customInteractions = customInteractions
                .Where(i => i.Name.ToLowerInvariant().Contains(_searchText) ||
                          i.Description.ToLowerInvariant().Contains(_searchText))
                .ToList();
        }

        var categorizedInteractions = new Dictionary<string, (string Name, List<object> Interactions)>();

        foreach (var id in interactionIds)
        {
            if (!_prototypeManager.TryIndex<InteractionPrototype>(id, out var interaction))
                continue;

            if (!string.IsNullOrEmpty(_searchText))
            {
                var interactionName = interaction.Name.ToLowerInvariant();
                var interactionDesc = interaction.Description != null ? interaction.Description.ToLowerInvariant() : "";

                if (!interactionName.Contains(_searchText) && !interactionDesc.Contains(_searchText))
                    continue;
            }

            var categoryId = interaction.Category.ToString();

            if (!_prototypeManager.TryIndex(interaction.Category, out InteractionCategoryPrototype? category))
                continue;

            if (!categorizedInteractions.TryGetValue(categoryId, out _))
            {
                var categoryName = category.Name;
                categorizedInteractions[categoryId] = (categoryName, new List<object>());
            }

            categorizedInteractions[categoryId].Interactions.Add(interaction);
        }

        foreach (var customInteraction in customInteractions)
        {
            var categoryId = customInteraction.CategoryId;

            if (string.IsNullOrEmpty(categoryId) || !_prototypeManager.TryIndex<InteractionCategoryPrototype>(categoryId, out _))
                continue;

            if (!categorizedInteractions.TryGetValue(categoryId, out _))
            {
                var category = _prototypeManager.Index<InteractionCategoryPrototype>(categoryId);
                categorizedInteractions[categoryId] = (category.Name, new List<object>());
            }

            categorizedInteractions[categoryId].Interactions.Add(customInteraction);

            _customInteractionIds.Add(customInteraction.Id);
        }

        if (categorizedInteractions.Count == 0)
        {
            var noResultsLabel = new Label
            {
                Text = "Ничего не найдено",
                HorizontalAlignment = HAlignment.Center,
                VerticalAlignment = VAlignment.Center,
                FontColorOverride = Color.Gray,
                Margin = new Thickness(0, 20, 0, 0)
            };

            CategoriesContainer.AddChild(noResultsLabel);
            return;
        }

        var sortedCategories = categorizedInteractions
            .OrderBy(kvp => kvp.Value.Name)
            .ToList();

        foreach (var (_, categoryData) in sortedCategories)
        {
            if (categoryData.Interactions.Count == 0)
                continue;

            var sortedInteractions = categoryData.Interactions
                .OrderBy(i => i is InteractionCategoryPrototype proto ? proto.Name : ((CustomInteraction)i).Name)
                .ToList();

            var collapsible = CreateCategoryCollapsible(categoryData.Name, sortedInteractions);
            CategoriesContainer.AddChild(collapsible);
        }
    }

    private Collapsible CreateCategoryCollapsible(string categoryName, List<object> interactions)
    {
        var collapsible = new Collapsible();

        var heading = new CollapsibleHeading(categoryName)
        {
            ChevronMargin = new Thickness(5, 0, 8, 0),
            MinHeight = 26,
            StyleClasses = { "BackgroundDark" },
            Margin = new Thickness(0, 1, 0, 0)
        };

        var body = new CollapsibleBody
        {
            Margin = new Thickness(0, 0, 0, 0)
        };

        var interactionsContainer = new BoxContainer
        {
            Orientation = BoxContainer.LayoutOrientation.Vertical,
            HorizontalExpand = true,
            Margin = new Thickness(2, 1, 2, 2),
        };

        foreach (var interaction in interactions)
        {
            BoxContainer buttonBox;
            if (interaction is InteractionPrototype standardInteraction)
            {
                buttonBox = CreateInteractionButton(standardInteraction);
            }
            else if (interaction is CustomInteraction customInteraction)
            {
                buttonBox = CreateCustomInteractionButton(customInteraction);
            }
            else
            {
                continue;
            }

            interactionsContainer.AddChild(buttonBox);
        }

        body.AddChild(interactionsContainer);

        collapsible.AddChild(heading);
        collapsible.AddChild(body);
        collapsible.Margin = new Thickness(0, 0, 0, 2);

        if (!string.IsNullOrEmpty(_searchText))
        {
            collapsible.BodyVisible = true;
        }

        return collapsible;
    }

    private BoxContainer CreateInteractionButton(InteractionPrototype interaction)
    {
        var buttonBox = new BoxContainer
        {
            Orientation = BoxContainer.LayoutOrientation.Horizontal,
            HorizontalExpand = true,
            Margin = new Thickness(0, 1, 0, 0),
            VerticalAlignment = VAlignment.Center
        };

        if (interaction.Icon.HasValue && _prototypeManager.TryIndex(interaction.Icon.Value, out InteractionIconPrototype? iconProto))
        {
            var iconRect = new TextureRect
            {
                TextureScale = new Vector2(0.4f, 0.4f),
                Stretch = TextureRect.StretchMode.Keep,
                Texture = _spriteSystem.Frame0(iconProto.Icon),
                SetSize = new Vector2(20, 20),
                Margin = new Thickness(3, 0, 4, 0),
                VerticalAlignment = VAlignment.Center
            };

            buttonBox.AddChild(iconRect);
        }
        else
        {
            var spacer = new Control
            {
                MinSize = new Vector2(20, 20),
                Margin = new Thickness(3, 0, 4, 0)
            };
            buttonBox.AddChild(spacer);
        }

        var isOnCooldown = IsInteractionOnCooldown(interaction.ID);

        var button = new Button
        {
            Text = interaction.Name,
            ToolTip = interaction.Description,
            HorizontalExpand = true,
            MinHeight = 24,
            StyleClasses = { "ButtonSquare" },
            Disabled = isOnCooldown
        };

        _buttonInteractions[button] = interaction.ID;

        if (isOnCooldown)
        {
            var userEntity = _owner?.Owner ?? default;
            if (_entityManager.TryGetComponent<InteractionsComponent>(userEntity, out var component) &&
                component.InteractionCooldowns.TryGetValue(interaction.ID, out var endTime))
            {
                var remainingTime = endTime - _gameTiming.CurTime;
                if (remainingTime > TimeSpan.Zero)
                {
                    var seconds = (int)Math.Ceiling(remainingTime.TotalSeconds);
                    button.Text = $"{interaction.Name} ({seconds}с)";
                }
            }
        }

        button.OnPressed += _ =>
        {
            ExecuteInteraction(interaction.ID, false);
        };

        buttonBox.AddChild(button);

        return buttonBox;
    }

    private BoxContainer CreateCustomInteractionButton(CustomInteraction interaction)
    {
        var buttonBox = new BoxContainer
        {
            Orientation = BoxContainer.LayoutOrientation.Horizontal,
            HorizontalExpand = true,
            Margin = new Thickness(0, 1, 0, 0),
            VerticalAlignment = VAlignment.Center
        };

        if (!string.IsNullOrEmpty(interaction.IconId) &&
            _prototypeManager.TryIndex<InteractionIconPrototype>(interaction.IconId, out var iconProto))
        {
            var iconRect = new TextureRect
            {
                TextureScale = new Vector2(0.4f, 0.4f),
                Stretch = TextureRect.StretchMode.Keep,
                Texture = _spriteSystem.Frame0(iconProto.Icon),
                SetSize = new Vector2(20, 20),
                Margin = new Thickness(3, 0, 4, 0),
                VerticalAlignment = VAlignment.Center
            };

            buttonBox.AddChild(iconRect);
        }
        else
        {
            var spacer = new Control
            {
                MinSize = new Vector2(20, 20),
                Margin = new Thickness(3, 0, 4, 0)
            };
            buttonBox.AddChild(spacer);
        }

        var isOnCooldown = IsInteractionOnCooldown(interaction.Id);

        var button = new Button
        {
            Text = interaction.Name,
            ToolTip = interaction.Description,
            HorizontalExpand = true,
            MinHeight = 24,
            StyleClasses = { "ButtonSquare" },
            Disabled = isOnCooldown,
        };

        _buttonInteractions[button] = interaction.Id;

        if (isOnCooldown)
        {
            var userEntity = _owner?.Owner ?? default;
            if (_entityManager.TryGetComponent<InteractionsComponent>(userEntity, out var component) &&
                component.InteractionCooldowns.TryGetValue(interaction.Id, out var endTime))
            {
                var remainingTime = endTime - _gameTiming.CurTime;
                if (remainingTime > TimeSpan.Zero)
                {
                    var seconds = (int)Math.Ceiling(remainingTime.TotalSeconds);
                    button.Text = $"{interaction.Name} ({seconds}с)";
                }
            }
        }

        button.OnPressed += _ =>
        {
            ExecuteInteraction(interaction.Id, true);
        };

        buttonBox.AddChild(button);

        return buttonBox;
    }

    private void ExecuteInteraction(string interactionId, bool isCustom)
    {
        if (!isCustom)
        {
            _owner?.SendBoundUserInterfaceMessage(new InteractionMessage(interactionId));
        }
        else
        {
            var customInteraction = _customInteractionService.GetInteraction(interactionId);
            if (customInteraction == null)
                return;

            var message = customInteraction.InteractionMessages.Count > 0
                ? _random.Pick(customInteraction.InteractionMessages)
                : "взаимодействует с";

            string? soundId = null;
            if (customInteraction.SoundIds.Count > 0)
                soundId = _random.Pick(customInteraction.SoundIds);

            var customData = new CustomInteractionData(
                message,
                soundId,
                customInteraction.SpawnsEffect,
                customInteraction.EffectChance,
                customInteraction.EntityEffectId,
                customInteraction.Cooldown
            );

            _owner?.SendBoundUserInterfaceMessage(new InteractionMessage(interactionId, customData));
        }
    }

    #endregion

    #region API

    public void SetOwner(InteractionsWindowBoundUserInterface owner)
    {
        _owner = owner;
    }

    #endregion

    #region CFG

    private void SetEmoteVisibility(bool visible)
    {
        _cfg.SetCVar(InteractionsCVars.EmoteVisibility, visible);
    }

    #endregion

    #region Custom

    private void OnCustomInteractionSearchTextChanged(LineEdit.LineEditEventArgs args)
    {
        _customSearchText = args.Text.ToLowerInvariant();
        LoadSavedInteractions();
    }

    private void OnNewCustomInteractionPressed(BaseButton.ButtonEventArgs args)
    {
        var editor = new CustomInteractionEditor();
        editor.SetCloseCallback((saved) =>
        {
            if (saved)
            {
                LoadSavedInteractions();
                if (_currentInteractionIds != null)
                {
                    _buttonInteractions.Clear();
                    _customInteractionIds.Clear();
                    PopulateCategories(_currentInteractionIds);
                }
            }
        });
        editor.OpenCentered();
    }

    private void LoadSavedInteractions()
    {
        SavedInteractionsContainer.DisposeAllChildren();

        var interactions = _customInteractionService.GetInteractions();

        if (!string.IsNullOrEmpty(_customSearchText))
        {
            interactions = interactions
                .Where(i => i.Name.ToLowerInvariant().Contains(_customSearchText) ||
                            i.Description.ToLowerInvariant().Contains(_customSearchText))
                .ToList();
        }

        if (interactions.Count == 0)
        {
            var emptyLabel = new Label
            {
                Text = string.IsNullOrEmpty(_customSearchText)
                    ? "У вас нет сохраненных взаимодействий"
                    : "Ничего не найдено",
                HorizontalAlignment = HAlignment.Center,
                VerticalAlignment = VAlignment.Center,
                FontColorOverride = Color.Gray,
                Margin = new Thickness(0, 10, 0, 0)
            };

            SavedInteractionsContainer.AddChild(emptyLabel);
            return;
        }

        foreach (var interaction in interactions)
        {
            SavedInteractionsContainer.AddChild(CreateSavedInteractionCard(interaction));
        }
    }

    private Control CreateSavedInteractionCard(CustomInteraction interaction)
    {
        var card = new PanelContainer
        {
            StyleClasses = { "PanelBackgroundDark" },
            Margin = new Thickness(0, 0, 0, 4)
        };

        var mainBox = new BoxContainer
        {
            Orientation = BoxContainer.LayoutOrientation.Vertical,
            Margin = new Thickness(4)
        };

        var headerBox = new BoxContainer
        {
            Orientation = BoxContainer.LayoutOrientation.Horizontal,
            HorizontalExpand = true,
            Margin = new Thickness(0, 0, 0, 2)
        };

        var titleLabel = new Label
        {
            Text = interaction.Name,
            FontColorOverride = new Color(255, 215, 0),
            HorizontalExpand = true
        };

        var editButton = new Button
        {
            Text = "Редактировать",
            StyleClasses = { "ButtonSquare" },
        };

        var deleteButton = new Button
        {
            Text = "Удалить",
            StyleClasses = { "ButtonSquare" },
        };

        editButton.OnPressed += _ => OnEditInteraction(interaction);
        deleteButton.OnPressed += _ => OnDeleteInteraction(interaction);

        headerBox.AddChild(titleLabel);
        headerBox.AddChild(editButton);
        headerBox.AddChild(deleteButton);

        var descriptionLabel = new Label
        {
            Text = interaction.Description,
            Margin = new Thickness(0, 2, 0, 4)
        };

        var categoryBox = new BoxContainer
        {
            Orientation = BoxContainer.LayoutOrientation.Horizontal,
            Margin = new Thickness(0, 2, 0, 0)
        };

        var categoryLabel = new Label
        {
            Text = $"Категория: {GetCategoryName(interaction.CategoryId)}",
            FontColorOverride = new Color(208, 166, 92)
        };

        categoryBox.AddChild(categoryLabel);

        mainBox.AddChild(headerBox);
        mainBox.AddChild(descriptionLabel);
        mainBox.AddChild(categoryBox);

        card.AddChild(mainBox);

        return card;
    }

    private string GetCategoryName(string categoryId)
    {
        if (string.IsNullOrEmpty(categoryId))
            return "Не указана";

        if (_prototypeManager.TryIndex<InteractionCategoryPrototype>(categoryId, out var category))
            return category.Name;

        return categoryId;
    }

    private void OnEditInteraction(CustomInteraction interaction)
    {
        var interactionCopy = new CustomInteraction
        {
            Id = interaction.Id,
            Name = interaction.Name,
            Description = interaction.Description,
            IconId = interaction.IconId,
            CategoryId = interaction.CategoryId,
            InteractionMessages = new List<string>(interaction.InteractionMessages),
            SoundIds = new List<string>(interaction.SoundIds),
            SpawnsEffect = interaction.SpawnsEffect,
            EffectChance = interaction.EffectChance,
            EntityEffectId = interaction.EntityEffectId,
            Cooldown = interaction.Cooldown
        };

        var editor = new CustomInteractionEditor(interactionCopy);
        editor.SetCloseCallback((saved) =>
        {
            if (saved)
            {
                LoadSavedInteractions();
                if (_currentInteractionIds != null)
                {
                    _buttonInteractions.Clear();
                    _customInteractionIds.Clear();
                    PopulateCategories(_currentInteractionIds);
                }
            }
        });
        editor.OpenCentered();
    }

    private void OnDeleteInteraction(CustomInteraction interaction)
    {
        var confirmDialog = new DefaultWindow
        {
            Title = "Подтверждение",
            MinSize = new Vector2(260, 120)
        };

        var dialogPanel = new PanelContainer
        {
            StyleClasses = { "BackgroundDark" },
            VerticalExpand = true,
            HorizontalExpand = true
        };

        var dialogVBox = new BoxContainer
        {
            Orientation = BoxContainer.LayoutOrientation.Vertical,
            Margin = new Thickness(6),
            VerticalExpand = true
        };

        var questionLabel = new Label
        {
            Text = $"Удалить '{interaction.Name}'?",
            HorizontalExpand = true,
            HorizontalAlignment = HAlignment.Center,
            Margin = new Thickness(0, 0, 0, 10),
            FontColorOverride = new Color(255, 215, 0)
        };

        var buttonsBox = new BoxContainer
        {
            Orientation = BoxContainer.LayoutOrientation.Horizontal,
            HorizontalAlignment = HAlignment.Center,
            VerticalAlignment = VAlignment.Bottom,
            VerticalExpand = true,
            Margin = new Thickness(0, 4, 0, 0)
        };

        var cancelButton = new Button
        {
            Text = "Отмена",
            StyleClasses = { "ButtonSquare" },
            Margin = new Thickness(2, 0)
        };

        var confirmButton = new Button
        {
            Text = "Удалить",
            StyleClasses = { "ButtonSquare" },
            Margin = new Thickness(2, 0)
        };

        cancelButton.OnPressed += _ => confirmDialog.Close();

        confirmButton.OnPressed += _ =>
        {
            _customInteractionService.RemoveInteraction(interaction.Id);
            LoadSavedInteractions();
            if (_currentInteractionIds != null)
            {
                _buttonInteractions.Clear();
                _customInteractionIds.Clear();
                PopulateCategories(_currentInteractionIds);
            }
            confirmDialog.Close();
        };

        buttonsBox.AddChild(cancelButton);
        buttonsBox.AddChild(confirmButton);

        dialogVBox.AddChild(questionLabel);
        dialogVBox.AddChild(buttonsBox);
        dialogPanel.AddChild(dialogVBox);

        confirmDialog.AddChild(dialogPanel);
        confirmDialog.OpenCentered();
    }

    #endregion
}
