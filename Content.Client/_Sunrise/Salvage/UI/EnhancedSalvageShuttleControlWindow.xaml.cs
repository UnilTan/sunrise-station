using System;
using Content.Client.Computer;
using Content.Shared._Sunrise.Salvage;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client._Sunrise.Salvage.UI;

[GenerateTypedNameReferences]
public sealed partial class EnhancedSalvageShuttleControlWindow : FancyWindow
{
    [Dependency] private readonly IGameTiming _timing = default!;

    public event Action<SalvageMissionType>? OnStartMission;
    public event Action? OnEndMission;
    public event Action? OnActivateEmergency;

    private SalvageMissionType _selectedMissionType = SalvageMissionType.Money;
    private EnhancedSalvageShuttleControlState? _currentState;

    public EnhancedSalvageShuttleControlWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        MoneyMissionButton.OnPressed += _ => SelectMissionType(SalvageMissionType.Money);
        ResourcesMissionButton.OnPressed += _ => SelectMissionType(SalvageMissionType.Resources);
        ArtifactsMissionButton.OnPressed += _ => SelectMissionType(SalvageMissionType.Artifacts);
        MixedMissionButton.OnPressed += _ => SelectMissionType(SalvageMissionType.Mixed);
        
        StartMissionButton.OnPressed += _ => OnStartMission?.Invoke(_selectedMissionType);
        EndMissionButton.OnPressed += _ => OnEndMission?.Invoke();
        EmergencyButton.OnPressed += _ => OnActivateEmergency?.Invoke();
        
        UpdateButtonStyles();
    }

    private void SelectMissionType(SalvageMissionType missionType)
    {
        _selectedMissionType = missionType;
        UpdateButtonStyles();
    }

    private void UpdateButtonStyles()
    {
        // Reset all buttons
        MoneyMissionButton.Modulate = Color.White;
        ResourcesMissionButton.Modulate = Color.White;
        ArtifactsMissionButton.Modulate = Color.White;
        MixedMissionButton.Modulate = Color.White;

        // Highlight selected button
        var selectedButton = _selectedMissionType switch
        {
            SalvageMissionType.Money => MoneyMissionButton,
            SalvageMissionType.Resources => ResourcesMissionButton,
            SalvageMissionType.Artifacts => ArtifactsMissionButton,
            SalvageMissionType.Mixed => MixedMissionButton,
            _ => MoneyMissionButton
        };

        selectedButton.Modulate = Color.LightBlue;
    }

    public void UpdateState(EnhancedSalvageShuttleControlState state)
    {
        _currentState = state;

        // Update mission status
        if (state.MissionActive)
        {
            MissionStatusLabel.Text = Loc.GetString("enhanced-salvage-shuttle-mission-active");
            MissionStatusLabel.FontColorOverride = Color.Green;

            var missionTypeText = state.CurrentMissionType switch
            {
                SalvageMissionType.Money => Loc.GetString("salvage-quota-mission-money"),
                SalvageMissionType.Resources => Loc.GetString("salvage-quota-mission-resources"),
                SalvageMissionType.Artifacts => Loc.GetString("salvage-quota-mission-artifacts"),
                SalvageMissionType.Mixed => Loc.GetString("salvage-quota-mission-mixed"),
                _ => "Unknown"
            };
            MissionTypeLabel.Text = Loc.GetString("enhanced-salvage-shuttle-mission-type", ("type", missionTypeText));
        }
        else
        {
            MissionStatusLabel.Text = Loc.GetString("enhanced-salvage-shuttle-no-mission");
            MissionStatusLabel.FontColorOverride = Color.Yellow;
            MissionTypeLabel.Text = "";
        }

        // Update timer
        if (state.TimeRemaining.HasValue)
        {
            var remaining = state.TimeRemaining.Value;
            if (remaining > TimeSpan.Zero)
            {
                TimerLabel.Text = $"{remaining.Minutes:00}:{remaining.Seconds:00}";
                TimerBar.Value = (float)(1.0 - (remaining.TotalMinutes / 30.0)); // Assuming 30 min max
            }
            else
            {
                TimerLabel.Text = "00:00";
                TimerBar.Value = 1.0f;
            }
        }
        else
        {
            TimerLabel.Text = "--:--";
            TimerBar.Value = 0.0f;
        }

        // Update warning
        WarningContainer.Visible = state.WarningActive;
        if (state.WarningActive)
        {
            TimerLabel.FontColorOverride = Color.Red;
        }
        else
        {
            TimerLabel.FontColorOverride = Color.Green;
        }

        // Update emergency mode
        EmergencyContainer.Visible = state.EmergencyMode;

        // Update button states
        StartMissionButton.Disabled = state.MissionActive;
        EndMissionButton.Disabled = !state.MissionActive;
        EmergencyButton.Disabled = !state.CanActivateEmergency || state.EmergencyMode;
        MissionSelectionContainer.Visible = !state.MissionActive;
    }
}